type Query {
  "Get a single playlist by its ID."
  playlist(id: ID!): Playlist
  "Get all the available playlists."
  featuredPlaylists: [Playlist!]!
  "Get a single track by its ID."
  tracks: [Track!]!
}

type Mutation {
  "Adds one or more tracks to a playlist."
  addTracksToPlaylist(
    input: AddTrackToPlaylistInput!
  ): AddTracksToPlaylistResponse!
}

"""
MUTATION INPUTS
"""
input AddTrackToPlaylistInput {
  "The ID of the playlist to add the track(s) to."
  playlistId: ID!
  "The ID(s) of the track(s) to add to the playlist."
  uris: [String!]!
}

"""
MUTATION RESPONSES
"""
type AddTracksToPlaylistResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The playlistId that was modified"
  playlist: Playlist
}


"""
TYPES
"""
type Playlist {
  "The ID of the playlist."
  id: ID!
  "The name of the playlist."
  name: String!
  "Describes the playlist and its content."
  description: String
  "The tracks in the playlist."
  tracks: [Track!]!
}

"A single audio file, usually a song."
type Track {
  "The ID for the track."
  id: ID!
  "The name of the track"
  name: String!
  "The track length in milliseconds."
  durationMs: Int!
  "Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown)"
  explicit: Boolean!
  "The URI for the track, usually a Spotify link."
  uri: String!
}